<?xml version="1.0" encoding="UTF-8"?>
<!--
日志级别
trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。
debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。
info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。
warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn（不算错误但是也请注意，比如以下depressed的方法）。
error： 错误信息。用的也比较多。
fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。
 -->
<Configuration status="OFF">
    <!-- 定义日志存放目录 -->
    <properties>
        <property name="logPath">logs</property>
        <!-- 输出日志的格式 -->
        <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址 -->
        <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss} {%t} [%-5p]-[%l] %m%n</property>
        <property name="PATTERNSHORT">%d{yyyy-MM-dd HH:mm:ss} {%t} [%-5p] %m%n</property>
    </properties>
    <!--先定义所有的appender(输出器) -->
    <Appenders>
        <!--输出到控制台 -->
        <Console name="ConsoleLog" target="SYSTEM_OUT">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!--输出日志的格式，引用自定义模板 PATTERN -->
            <PatternLayout pattern="${PATTERN}" />
        </Console>
        <File name="ErrorFileLog" fileName="${logPath}/error.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${PATTERN}" />
        </File>
        <RollingFile name="DebugRollingFileLog" fileName="${logPath}/debug.log" filePattern="${logPath}/$${date:yyyy-MM}/app-%d{yyyy-MM-dd}.log">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
        </RollingFile>
        <RollingFile name="cosumeRollingFileLog" fileName="${logPath}/consume.log" filePattern="${logPath}/$${date:yyyy-MM}/cosume-%d{yyyy-MM-dd}.log">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${PATTERNSHORT}" />
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
        </RollingFile>
        <Socket name="LogStash" host="192.168.105.64" port="4560" protocol="TCP">
            <PatternLayout pattern="${PATTERN}" />
        </Socket>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <Loggers>
        <!--建立一个默认的Root的logger，记录大于level高于warn的信息，如果这里的level高于Appenders中的，则Appenders中也是以此等级为起点，比如，这里level="fatal"，则Appenders中只出现fatal信息 -->
        <!-- 生产环境level>=warn -->
        <Root level="INFO">
            <!-- 输出器,可选上面定义的任何项组合，或全选，做到可随意定制 -->
            <appender-ref ref="ConsoleLog" />
            <appender-ref ref="ErrorFileLog" />
            <appender-ref ref="DebugRollingFileLog" />
            <appender-ref ref="LogStash" />
        </Root>
        <!-- 第三方日志系统 -->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息，也可以在spring boot 的logging.level.org.springframework=FATAL设置-->
        <!-- <logger name="org.springframework" level="ERROR"></logger>
        <logger name="org.mybatis" level="DEBUG"></logger>
        <logger name="org.apache.http" level="ERROR" /> -->
        <logger name="com.zealot" level="DEBUG" />
    </Loggers>
</Configuration>